{
  "object": "value",
  "document": {
    "object": "document",
    "data": {},
    "nodes": [
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "We'll be using these tools/libraries to build a multiplayer game.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "unordered_list",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text":
                          "Three.js. A framework built on top of WebGL that makes it easier to create graphics in the browswer.",
                        "marks": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text":
                          "Cannon.js. A physics engine that pairs well with Three.js.",
                        "marks": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
                  },
                  {
                    "object": "inline",
                    "type": "link",
                    "isVoid": false,
                    "data": { "href": "https://github.com/websockets/ws" },
                    "nodes": [
                      {
                        "object": "text",
                        "leaves": [
                          { "object": "leaf", "text": "WS", "marks": [] }
                        ]
                      }
                    ]
                  },
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text":
                          ". A lightweight WebSocket client for node and the browser (Alternatives: Socket.io).",
                        "marks": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
                  },
                  {
                    "object": "inline",
                    "type": "link",
                    "isVoid": false,
                    "data": { "href": "http://reactivex.io/rxjs/" },
                    "nodes": [
                      {
                        "object": "text",
                        "leaves": [
                          { "object": "leaf", "text": "RxJs", "marks": [] }
                        ]
                      }
                    ]
                  },
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text":
                          " - a library for using observables (event streams like keydown events). ",
                        "marks": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "header_two",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "A Quick-And-Dirty Intro to Three.js",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "Three.js is a framework built around WebGL that makes it easy to create graphics in the browser. It uses the ",
                "marks": []
              }
            ]
          },
          {
            "object": "inline",
            "type": "html",
            "isVoid": false,
            "data": { "openingTag": "<code>", "closingTag": "</code>" },
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "canvas element", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": ".", "marks": [] }]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "Every three.js project has these basic elements:",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "unordered_list",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      { "object": "leaf", "text": "scene", "marks": [] }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      { "object": "leaf", "text": "camera", "marks": [] }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      { "object": "leaf", "text": "renderer", "marks": [] }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "header_four",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "Scene", "marks": [] }]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "This is the most global three.js namespace. When objects are added to the scene, they can be found in ",
                "marks": []
              }
            ]
          },
          {
            "object": "inline",
            "type": "html",
            "isVoid": false,
            "data": { "openingTag": "<code>", "closingTag": "</code>" },
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "scene.children", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": ". It's initialized with:",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": { "syntax": "js" },
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "var scene = new THREE.Scene();",
                    "marks": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "Objects are added to the scene with:",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": { "syntax": "js" },
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "scene.add(obj)", "marks": [] }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "header_four",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "Camera", "marks": [] }]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "The camera is the vantage point the scene is viewed from.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "Here's how a camera is created:",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": { "syntax": "js" },
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "// Camera frustum vertical field of view",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "var fov = 75;", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "// Camera frustum aspect ratio",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "var aspect = window.innerWidth / window.innerHeight;",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "// Camera frustum near plane",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "var near = 0.1;", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "// Camera frustum far plane",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "var far = 1000;", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "var camera = new THREE.PerspectiveCamera(fov, aspect, near, far);",
                    "marks": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "header_four",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "Renderer", "marks": [] }]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "In three.js we create a new WebGLRenderer and then append the renderer.domElement to the document. The renderer.domElement is just an HTML canvas element.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": { "syntax": "js" },
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "var renderer = new THREE.WebGLRenderer({",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "  antialias: true", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "});", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "// make the canvas element the dimensions of the screen",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "renderer.setSize(window.innerWidth, window.innerHeight);",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "document.body.appendChild(renderer.domElement);",
                    "marks": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "In addition to appending a canvas element to the document, you can use a pre-existing canvas element.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "The three.js renderer has a method called render(). After the renderer is created we call this method:",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "function render() {",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  // call render again before the next repaint",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  requestAnimationFrame(render)",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  renderer.render(scene, camera);",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "}", "marks": [] }]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
          },
          {
            "object": "inline",
            "type": "html",
            "isVoid": false,
            "data": { "openingTag": "<code>", "closingTag": "</code>" },
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "requestAnimationFrame()",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  " requests that the browser call the render() function to update an animation before the next repaint. A reference to the render function is passed to ",
                "marks": []
              }
            ]
          },
          {
            "object": "inline",
            "type": "html",
            "isVoid": false,
            "data": { "openingTag": "<code>", "closingTag": "</code>" },
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "requestAnimationFrame",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [
              { "object": "leaf", "text": " as an argument.", "marks": [] }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "header_four",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "Adding Objects to the Scene",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "After creating a scene, camera and renderer, you'll want to create some objects (meshes) and add them to the scene. A mesh is a composite of a ",
                "marks": []
              },
              {
                "object": "leaf",
                "text": "material",
                "marks": [{ "object": "mark", "type": "BOLD", "data": {} }]
              },
              { "object": "leaf", "text": " and a ", "marks": [] },
              {
                "object": "leaf",
                "text": "geometry",
                "marks": [{ "object": "mark", "type": "BOLD", "data": {} }]
              },
              {
                "object": "leaf",
                "text": ". Properties like texture belong to the material.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": { "syntax": "js" },
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "let texture = (new THREE.TextureLoader()).load('assets/box.jpg')",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "let boxMesh = new THREE.Mesh(",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  new THREE.BoxGeometry(1, 1, 1, 1),",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  new THREE.MeshLambertMaterial({ ",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "    map: texture, ",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "    vertexColors: THREE.VertexColors ",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "  })", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": ") ", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "scene.add(boxMesh)",
                    "marks": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "header_two",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "Terrain", "marks": [] }]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "To create some basic terrain, we'll use ",
                "marks": []
              }
            ]
          },
          {
            "object": "inline",
            "type": "link",
            "isVoid": false,
            "data": {
              "href":
                "https://threejs.org/docs/index.html#api/geometries/PlaneGeometry"
            },
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              },
              {
                "object": "inline",
                "type": "html",
                "isVoid": false,
                "data": { "openingTag": "<code>", "closingTag": "</code>" },
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text":
                          "THREE.PlaneGeometry(width, height, segments, segments)",
                        "marks": []
                      }
                    ]
                  }
                ]
              },
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  " and then adjust the elevation of the vertices in the geometry.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "The first two arguments are the width and height of the plane, respectively. The latter two are the number of segments.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "The snippet below creates a 20 x 20 grid of tiles.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "const mesh = new THREE.Mesh(",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  new THREE.PlaneGeometry(10, 10, 20, 20),",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  new THREE.MeshNormalMaterial()",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": ")", "marks": [] }]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "We create a Three.js mesh object by combining geometry and material objects.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "Right now we've made a flat plane. For terrain, we need to adjust height of the plane at each vertex. You can find a reference to the mesh's geometry in mesh.geometry.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "So mesh.geometry.vertices is an array of vertices that comprise the plane. To create terrain we can loop through the vertices and adjust the altitude.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "for(let i = 0; i < mesh.geometry.vertices.length; i++) {",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  mesh.geometry.vertices[i].setZ(Math.random())",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "}", "marks": [] }]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "Oh, and I forgot to mention that mesh.geometry.vertices is an array of Vectors. Vectors are special Three.js objects that store x, y, z coordinates. But they're also so much more; they come with some useful methods like clone(), add(), copy() and so forth. In the above code snippet, setZ() does what you'd expect: it sets the value of the z coordinate.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "Link to ", "marks": [] }]
          },
          {
            "object": "inline",
            "type": "link",
            "isVoid": false,
            "data": {
              "href":
                "https://gist.github.com/unshift/779519c104a1c3b7635983e5f737926f"
            },
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "gist", "marks": [] }]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
          },
          {
            "object": "inline",
            "type": "html",
            "isVoid": true,
            "data": {
              "openingTag":
                "<script async src=\"//jsfiddle.net/rnaromrx/3/embed/result/\">",
              "closingTag": "</script>",
              "innerHtml": ""
            },
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": " ", "marks": [] }]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
          }
        ]
      },
      {
        "object": "block",
        "type": "header_two",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "Mutating State in Three.js",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "Most operations in Three.js mutate state. E.g., consider the following code:",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "let vec = new THREE.Vector(0, 0, 0)",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "for(let i = 0; i < 3; i++) {",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  vec.add(new THREE.Vector(0, 0, 1))",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "}", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "console.log(vec)", "marks": [] }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "What does console.log(vec) output at the end of the loop? The answer is ",
                "marks": []
              }
            ]
          },
          {
            "object": "inline",
            "type": "html",
            "isVoid": false,
            "data": { "openingTag": "<code>", "closingTag": "</code>" },
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "{x: 0, y: 0, z: 3}",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  ". Most operations mutate state. Three.js objects have a clone() method that returns a copy. You can use clone to avoid mutating the original.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "header_two",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "Moving A Hero With the Keyboard",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "One of the first challenges of creating some games is figuring out how to move the hero.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "We can translate a sprite along the surface of the terrain by listening for ",
                "marks": []
              }
            ]
          },
          {
            "object": "inline",
            "type": "html",
            "isVoid": false,
            "data": { "openingTag": "<code>", "closingTag": "</code>" },
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "onKeyDown", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": " and ", "marks": [] }]
          },
          {
            "object": "inline",
            "type": "html",
            "isVoid": false,
            "data": { "openingTag": "<code>", "closingTag": "</code>" },
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "onKeyUp", "marks": [] }]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": " events and then adjusting the sprite's position.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "Here's a naive approach:",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": { "syntax": "js" },
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "let movingRight;", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "let movingLeft;", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "let movingDown;", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "let movingUp;", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "window.addEventListener('onkeydown', function(evt) {",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  let { key } = evt",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "  switch(key) {", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "    case 'ArrowRight'",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "      movingRight = true;",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "      break;", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "   case 'ArrowLeft'",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "      movingLeft = true;",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "      break;", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "    ...", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "  }", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "})", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "function render() {",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  // queue up a new animation frame",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  requestAnimationFrame(render)",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  // move in the +x direction",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  if(movingRight) sprite.position.add(1,0,0)",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  // move in the -x direction",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  if(movingLeft) sprite.position.add(-1,0,0)",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "  ...", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  renderer.render(",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "    scene,", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "    camera", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "  )", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "}", "marks": [] }]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "unordered_list",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
                  },
                  {
                    "object": "inline",
                    "type": "html",
                    "isVoid": false,
                    "data": { "openingTag": "<code>", "closingTag": "</code>" },
                    "nodes": [
                      {
                        "object": "text",
                        "leaves": [
                          {
                            "object": "leaf",
                            "text": "requestAnimationFrame()",
                            "marks": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text":
                          " does exactly what you would expect: it adds to the top of the stack. ",
                        "marks": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text":
                          "We pass a reference to the enclosing function render() to requestAnimationFrame; render() will be a called again at a later time (a few milliseconds later). ",
                        "marks": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "header_two",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "Tapping Into Keyboard Event Streams With Observables",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "An observable is just a stream of events. Here are some concrete examples:",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "unordered_list",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text": "A sequence of clicks",
                        "marks": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text": "A sequence of mouse movements",
                        "marks": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text": "Requests to an API",
                        "marks": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "These are all just streams of events - aka - observables. ",
                "marks": []
              }
            ]
          },
          {
            "object": "inline",
            "type": "link",
            "isVoid": false,
            "data": { "href": "http://reactivex.io/rxjs/" },
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "RxJs", "marks": [] }]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  " is a third-party library available on npm that helps you manipulate such event streams (observables).",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "Observables are useful for ",
                "marks": []
              }
            ]
          },
          {
            "object": "inline",
            "type": "html",
            "isVoid": false,
            "data": { "openingTag": "<code>", "closingTag": "</code>" },
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "onkeydown", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  " events because they can help simplify the control flow and pair down on the business logic.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "We might be tempted to write bulky switch statements for onkeydown and onkeyup events. But with RxJs we can manipulate the stream of keyboard events and then subscribe to changes.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": { "syntax": "js" },
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "import Rx from 'rxjs/Rx';",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "Rx.Observable.fromEvent(document, 'keydown')",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  .map(e => e.key)",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  .subscribe(key => { console.log(key) })",
                    "marks": []
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "Doesn't look too bad right?",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "In the above the snippet, we:",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "ordered_list",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text":
                          "Create an observable from the document.onkeydown event. ",
                        "marks": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text": "Map the observable to the key",
                        "marks": []
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "list_item",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "block",
                "type": "unstyled",
                "isVoid": false,
                "data": {},
                "nodes": [
                  {
                    "object": "text",
                    "leaves": [
                      {
                        "object": "leaf",
                        "text": "Subscribe to changes",
                        "marks": []
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "So far, this doesn't look very different from the plain Javascript approach.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": { "syntax": "js" },
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "const keyBindings = {",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  ArrowRight: new THREE.Vector3(0.1, 0, 0),",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  ArrowLeft: new THREE.Vector3(-0.1, 0, 0),",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  ArrowUp: new THREE.Vector3(0, 0.1, 0),",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  ArrowDown: new THREE.Vector3(0, -0.1, 0),",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "}", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "// create an observable for the stream of keydown events",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "let keydown = Rx.Observable",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  .fromEvent(document, 'keydown')",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  .map(evt => keyBindings[evt.key])",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "// subcribe to changes",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "keydown.subscribe((increment) => {",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  mesh.position.add(increment)",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "})", "marks": [] }]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
          },
          {
            "object": "inline",
            "type": "html",
            "isVoid": true,
            "data": {
              "openingTag":
                "<script async src=\"//jsfiddle.net/brainmojito/u8g06nkc/embed/js,result/\">",
              "closingTag": "</script>",
              "innerHtml": ""
            },
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": " ", "marks": [] }]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "Link to ", "marks": [] }]
          },
          {
            "object": "inline",
            "type": "link",
            "isVoid": false,
            "data": {
              "href":
                "https://gist.github.com/unshift/4aa182c81af31b77d4cb609f3603ab79"
            },
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "Gist", "marks": [] }]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "Here's another approach using RxJs that uses a store to maintain application state.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text": "Earlier we mapped event streams to value, e.g., ",
                "marks": []
              }
            ]
          },
          {
            "object": "inline",
            "type": "html",
            "isVoid": false,
            "data": { "openingTag": "<code>", "closingTag": "</code>" },
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": ".map(e => e.key)", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  ". With the stateful approach we map the stream of events to a ",
                "marks": []
              },
              {
                "object": "leaf",
                "text": "state changing function",
                "marks": [{ "object": "mark", "type": "ITALIC", "data": {} }]
              },
              { "object": "leaf", "text": ".", "marks": [] }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": { "syntax": "js" },
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "let stream = Rx.Observable.fromEvent(document, 'keydown')",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  .map(e => state => Object.assign({}, state, {",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "    key: e.key", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "  }))", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "// We create an object with our initial state. Whenever a new state change function",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "// is received we call it and pass the state. The new state is returned and",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "// ready to be changed again on the next keydown event",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "// note: RxJs' scan is kind of like reduce which you may be more familiar with",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "let state = stream.scan((state, changeFn) => changeFn(state), {",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  { "object": "leaf", "text": "  key: null", "marks": [] }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "})", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "state.subscribe(function(state) {",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text":
                      "  document.querySelector('body').textContent = JSON.stringify(state)",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "})", "marks": [] }]
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "So far we can move a hero around on a flat plane using a keyboard. Our hero only stays on the surface because we only adjust position on the x and y axises. But terrain has height. There are a few ways to tackle this problem.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "header_two",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [{ "object": "leaf", "text": "Getting Z", "marks": [] }]
          }
        ]
      },
      {
        "object": "block",
        "type": "paragraph",
        "isVoid": false,
        "data": {},
        "nodes": [
          {
            "object": "text",
            "leaves": [
              {
                "object": "leaf",
                "text":
                  "For each new x and y position our character we could get the magnitude of the z-dimension (height) of our terrain.",
                "marks": []
              }
            ]
          }
        ]
      },
      {
        "object": "block",
        "type": "code_block",
        "isVoid": false,
        "data": { "syntax": "js" },
        "nodes": [
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": " let terrainMesh = new THREE.Mesh(...)",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": " function getZ(x, y) {",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "   let { vertices } = terrainMesh.geometry",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "   return vertices.find(vertex => ",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "     vertex.x === x && vertex.y === y",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "   )", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": " }", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "...", "marks": [] }]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "stream.subscribe(increment => {",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  let z = getZ(increment.x, increment.y)",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [
                  {
                    "object": "leaf",
                    "text": "  mesh.position.add(increment.setZ(z))",
                    "marks": []
                  }
                ]
              }
            ]
          },
          {
            "object": "block",
            "type": "code_line",
            "isVoid": false,
            "data": {},
            "nodes": [
              {
                "object": "text",
                "leaves": [{ "object": "leaf", "text": "})", "marks": [] }]
              }
            ]
          }
        ]
      }
    ]
  }
}
